/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => AITaggerPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/services/types.ts
var ConnectionTestResult;
(function(ConnectionTestResult2) {
  ConnectionTestResult2["Success"] = "success";
  ConnectionTestResult2["Failed"] = "failed";
})(ConnectionTestResult || (ConnectionTestResult = {}));

// src/services/baseService.ts
var BaseLLMService = class {
  constructor(config) {
    this.endpoint = config.endpoint.trim();
    this.modelName = config.modelName.trim();
  }
  validateConfig() {
    if (!this.endpoint) {
      return "API endpoint is not configured";
    }
    if (!this.modelName) {
      return "Model name is not configured";
    }
    try {
      new URL(this.endpoint);
    } catch (e) {
      return "Invalid API endpoint URL format";
    }
    return null;
  }
  validateTag(tag) {
    const tagRegex = /^#[a-zA-Z0-9-]+$/;
    return tagRegex.test(tag);
  }
  validateTags(tags) {
    const validatedTags = [];
    const errors = [];
    for (const tag of tags) {
      if (!this.validateTag(tag)) {
        errors.push(`Invalid tag format: ${tag}`);
        continue;
      }
      validatedTags.push(tag);
    }
    if (errors.length > 0) {
      throw new Error(`Tag validation errors:
${errors.join("\n")}`);
    }
    if (validatedTags.length === 0) {
      throw new Error("No valid tags found in response");
    }
    return validatedTags;
  }
  extractJSONFromResponse(response) {
    console.log("Raw response:", response);
    const markdownJsonRegex = /```(?:json)?\s*(\{[\s\S]*?\})\s*```/;
    const markdownMatch = response.match(markdownJsonRegex);
    if (markdownMatch) {
      console.log("Found JSON in markdown block:", markdownMatch[1]);
      return markdownMatch[1];
    }
    const jsonRegex = /\{[\s\S]*\}/;
    const jsonMatch = response.match(jsonRegex);
    if (jsonMatch) {
      console.log("Found standalone JSON:", jsonMatch[0]);
      return jsonMatch[0];
    }
    throw new Error("No valid JSON found in response");
  }
  buildPrompt(content, existingTags) {
    return `Analyze the following content and:
1. Match 1-3 most relevant tags from existing tags
2. Generate 3-10 new relevant tags

Requirements for tags:
- Must start with # symbol
- Can only contain letters, numbers, and hyphens
- No spaces allowed
- Example format: #technology, #artificial-intelligence, #coding

Existing tags:
${existingTags.join(", ")}

Content:
${content}

Return only a JSON object in this exact format:
{
    "matchedTags": ["#tag1", "#tag2"],
    "newTags": ["#tag1", "#tag2", "#tag3"]
}`;
  }
  parseResponse(response) {
    try {
      console.log("Attempting to parse response...");
      const jsonContent = this.extractJSONFromResponse(response);
      console.log("Extracted JSON content:", jsonContent);
      const parsed = JSON.parse(jsonContent);
      console.log("Parsed JSON:", parsed);
      if (!parsed.matchedTags || !Array.isArray(parsed.matchedTags) || !parsed.newTags || !Array.isArray(parsed.newTags)) {
        console.error("Invalid response structure:", parsed);
        throw new Error("Response missing required fields");
      }
      const validatedMatchedTags = this.validateTags(parsed.matchedTags);
      const validatedNewTags = this.validateTags(parsed.newTags);
      const uniqueTags = new Set([...validatedMatchedTags, ...validatedNewTags]);
      return {
        matchedExistingTags: validatedMatchedTags,
        suggestedTags: Array.from(new Set(validatedNewTags))
      };
    } catch (error) {
      console.error("Error parsing response:", error);
      console.error("Raw response:", response);
      if (error instanceof Error) {
        throw new Error(`Invalid response format: ${error.message}`);
      }
      throw new Error("Invalid response format");
    }
  }
  handleError(error, operation) {
    console.error(`Error in ${operation}:`, error);
    if (error instanceof Error) {
      if (error.name === "AbortError") {
        throw new Error(`Operation timed out: ${operation}`);
      }
      throw new Error(`${operation} failed: ${error.message}`);
    }
    throw error;
  }
};

// src/services/localService.ts
var LocalLLMService = class extends BaseLLMService {
  constructor(config) {
    super(config);
    this.endpoint = this.normalizeEndpoint(config.endpoint);
  }
  normalizeEndpoint(endpoint) {
    endpoint = endpoint.trim();
    endpoint = endpoint.replace(/\/$/, "");
    if (endpoint.endsWith("/api/generate")) {
      endpoint = endpoint.replace("/api/generate", "/v1/chat/completions");
    }
    if (!endpoint.endsWith("/v1/chat/completions")) {
      endpoint = `${endpoint}/v1/chat/completions`;
    }
    return endpoint;
  }
  validateLocalConfig() {
    const baseError = this.validateConfig();
    if (baseError)
      return baseError;
    try {
      const url = new URL(this.endpoint);
      if (!url.pathname.endsWith("/v1/chat/completions")) {
        return "Invalid endpoint format. Should end with /v1/chat/completions";
      }
    } catch (e) {
      return "Invalid endpoint URL format";
    }
    return null;
  }
  async testConnection() {
    try {
      const validationError = this.validateLocalConfig();
      if (validationError) {
        return {
          result: ConnectionTestResult.Failed,
          error: {
            type: "network",
            message: validationError
          }
        };
      }
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 1e4);
      console.log("Testing local LLM connection with endpoint:", this.endpoint);
      const response = await fetch(this.endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          model: this.modelName,
          messages: [{
            role: "user",
            content: "Test connection"
          }],
          max_tokens: 5
        }),
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      const responseText = await response.text();
      console.log("Local LLM test response:", responseText);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      try {
        const data = JSON.parse(responseText);
        if (!data.choices || !Array.isArray(data.choices)) {
          throw new Error("Invalid response format");
        }
      } catch (parseError) {
        console.error("Parse error:", parseError);
        throw new Error("Invalid response format");
      }
      return { result: ConnectionTestResult.Success };
    } catch (error) {
      console.error("Local LLM connection test error:", error);
      let testError = {
        type: "unknown",
        message: "Unknown error"
      };
      if (error instanceof Error) {
        if (error.name === "AbortError") {
          testError = {
            type: "timeout",
            message: "Connection timeout, please check if the local LLM service is running"
          };
        } else if (error.message.includes("Failed to fetch")) {
          testError = {
            type: "network",
            message: "Network error, please check if the local service is accessible"
          };
        } else if (error.message.includes("HTTP error")) {
          testError = {
            type: "network",
            message: `Service error: ${error.message}`
          };
        } else if (error.message.includes("Invalid response")) {
          testError = {
            type: "unknown",
            message: "Invalid response format from local service"
          };
        }
      }
      return {
        result: ConnectionTestResult.Failed,
        error: testError
      };
    }
  }
  async analyzeTags(content, existingTags) {
    var _a, _b, _c;
    try {
      const validationError = this.validateLocalConfig();
      if (validationError) {
        throw new Error(validationError);
      }
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3e4);
      const response = await fetch(this.endpoint, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          model: this.modelName,
          messages: [
            {
              role: "system",
              content: "You are a professional document tag analysis assistant. You need to analyze content and suggest relevant tags."
            },
            {
              role: "user",
              content: this.buildPrompt(content, existingTags)
            }
          ],
          temperature: 0.3
        }),
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      const responseText = await response.text();
      console.log("Local LLM response:", responseText);
      if (!response.ok) {
        throw new Error(`API error: ${response.status} ${response.statusText}`);
      }
      try {
        const data = JSON.parse(responseText);
        const textToAnalyze = (_c = (_b = (_a = data.choices) == null ? void 0 : _a[0]) == null ? void 0 : _b.message) == null ? void 0 : _c.content;
        if (!textToAnalyze) {
          throw new Error("Missing response content");
        }
        return this.parseResponse(textToAnalyze);
      } catch (parseError) {
        console.error("Parse error:", parseError, "Response:", responseText);
        throw new Error("Invalid response format from local service");
      }
    } catch (error) {
      return this.handleError(error, "Tag analysis");
    }
  }
};

// src/services/cloudService.ts
var CloudLLMService = class extends BaseLLMService {
  constructor(config) {
    super(config);
    var _a;
    this.apiKey = ((_a = config.apiKey) == null ? void 0 : _a.trim()) || "";
  }
  validateCloudConfig() {
    const baseError = this.validateConfig();
    if (baseError)
      return baseError;
    if (!this.apiKey) {
      return "API key is not configured";
    }
    if (!this.endpoint.toLowerCase().includes("/chat/completions")) {
      return "Cloud API endpoint should include '/chat/completions'";
    }
    return null;
  }
  async testConnection() {
    var _a;
    try {
      const validationError = this.validateCloudConfig();
      if (validationError) {
        return {
          result: ConnectionTestResult.Failed,
          error: {
            type: "network",
            message: validationError
          }
        };
      }
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 1e4);
      console.log("Testing connection with endpoint:", this.endpoint);
      const response = await fetch(this.endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.modelName,
          messages: [
            {
              role: "system",
              content: "Connection test"
            }
          ],
          max_tokens: 5
        }),
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      const responseText = await response.text();
      console.log("Cloud API test response:", responseText);
      if (!response.ok) {
        if (response.status === 401) {
          throw new Error("Authentication failed: Invalid API key");
        } else if (response.status === 404) {
          throw new Error("API endpoint not found: Please verify the URL");
        }
        try {
          const errorJson = JSON.parse(responseText);
          throw new Error(((_a = errorJson.error) == null ? void 0 : _a.message) || errorJson.message || `HTTP error ${response.status}`);
        } catch (e) {
          throw new Error(`HTTP error ${response.status}: ${responseText}`);
        }
      }
      const data = JSON.parse(responseText);
      if (!data.choices || !Array.isArray(data.choices)) {
        throw new Error("Invalid API response format: missing choices array");
      }
      return { result: ConnectionTestResult.Success };
    } catch (error) {
      let testError = {
        type: "unknown",
        message: "Unknown error occurred during connection test"
      };
      if (error instanceof Error) {
        if (error.name === "AbortError") {
          testError = {
            type: "timeout",
            message: "Connection timeout: Please check your network status"
          };
        } else if (error.message.includes("Failed to fetch")) {
          testError = {
            type: "network",
            message: "Network error: Unable to reach the API endpoint"
          };
        } else if (error.message.includes("Authentication failed")) {
          testError = {
            type: "auth",
            message: "Authentication failed: Please verify your API key"
          };
        } else if (error.message.includes("API endpoint not found")) {
          testError = {
            type: "network",
            message: "API endpoint not found: Please verify the URL"
          };
        } else {
          testError = {
            type: "unknown",
            message: `Error: ${error.message}`
          };
        }
      }
      console.error("Cloud API test error:", error);
      return {
        result: ConnectionTestResult.Failed,
        error: testError
      };
    }
  }
  async analyzeTags(content, existingTags) {
    var _a, _b, _c;
    try {
      const validationError = this.validateCloudConfig();
      if (validationError) {
        throw new Error(validationError);
      }
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3e4);
      const response = await fetch(this.endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: this.modelName,
          messages: [
            {
              role: "system",
              content: "You are a professional document tag analysis assistant. You need to analyze document content, match relevant tags from existing ones, and generate new relevant tags."
            },
            {
              role: "user",
              content: this.buildPrompt(content, existingTags)
            }
          ]
        }),
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      const responseText = await response.text();
      console.log("Cloud API response:", responseText);
      if (!response.ok) {
        try {
          const errorJson = JSON.parse(responseText);
          throw new Error(((_a = errorJson.error) == null ? void 0 : _a.message) || errorJson.message || `API error: ${response.status}`);
        } catch (e) {
          throw new Error(`API error: ${response.status} ${response.statusText}`);
        }
      }
      const data = JSON.parse(responseText);
      if (!data.choices || !((_c = (_b = data.choices[0]) == null ? void 0 : _b.message) == null ? void 0 : _c.content)) {
        throw new Error("Invalid API response format: missing message content");
      }
      return this.parseResponse(data.choices[0].message.content);
    } catch (error) {
      return this.handleError(error, "Tag analysis");
    }
  }
};

// src/tagUtils.ts
var import_obsidian = __toModule(require("obsidian"));
var TagUtils = class {
  static validateTag(tag) {
    const tagRegex = /^#[a-zA-Z0-9-]+$/;
    return tagRegex.test(tag);
  }
  static validateTags(tags) {
    const valid = [];
    const invalid = [];
    for (const tag of tags) {
      if (this.validateTag(tag)) {
        valid.push(tag);
      } else {
        invalid.push(tag);
      }
    }
    return { valid, invalid };
  }
  static getExistingTags(frontmatter) {
    if (!frontmatter || !frontmatter.tags) {
      return [];
    }
    let tags = [];
    if (Array.isArray(frontmatter.tags)) {
      tags = frontmatter.tags;
    } else if (typeof frontmatter.tags === "string") {
      tags = [frontmatter.tags];
    }
    const { valid, invalid } = this.validateTags(tags);
    if (invalid.length > 0) {
      console.warn("Found invalid tags in frontmatter:", invalid);
    }
    return valid;
  }
  static mergeTags(existingTags, newTags) {
    const { valid: validExisting } = this.validateTags(existingTags);
    const { valid: validNew } = this.validateTags(newTags);
    const allTags = [...validExisting, ...validNew];
    return [...new Set(allTags)].sort();
  }
  static formatTag(tag) {
    tag = tag.trim();
    const formattedTag = tag.startsWith("#") ? tag : `#${tag}`;
    if (!this.validateTag(formattedTag)) {
      throw new Error(`Invalid tag format: ${tag} (can only contain letters, numbers, and hyphens)`);
    }
    return formattedTag;
  }
  static async clearTags(app, file) {
    try {
      const content = await app.vault.read(file);
      if (!content.startsWith("---\n")) {
        return {
          success: false,
          message: "No frontmatter found in the note"
        };
      }
      const endOfFrontMatter = content.indexOf("---\n", 4);
      if (endOfFrontMatter === -1) {
        return {
          success: false,
          message: "Invalid frontmatter format"
        };
      }
      const frontMatter = content.slice(4, endOfFrontMatter);
      const afterFrontMatter = content.slice(endOfFrontMatter);
      const lines = frontMatter.split("\n");
      const newLines = [];
      let inTagsBlock = false;
      let tagsFound = false;
      for (const line of lines) {
        if (line.trim().startsWith("tags:")) {
          tagsFound = true;
          newLines.push("tags:");
          inTagsBlock = true;
          continue;
        }
        if (inTagsBlock) {
          if (line.trim().startsWith("-") || line.trim().startsWith("  -")) {
            continue;
          } else {
            inTagsBlock = false;
          }
        }
        if (!inTagsBlock) {
          newLines.push(line);
        }
      }
      if (!tagsFound) {
        newLines.push("tags:");
      }
      const newContent = `---
${newLines.join("\n")}${afterFrontMatter}`;
      await app.vault.modify(file, newContent);
      await app.metadataCache.trigger("changed", file);
      await new Promise((resolve) => setTimeout(resolve, 100));
      app.workspace.trigger("file-open", file);
      return {
        success: true,
        message: "Successfully cleared all tags",
        tags: []
      };
    } catch (error) {
      console.error("Error clearing tags:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      new import_obsidian.Notice("Error clearing tags");
      return {
        success: false,
        message: `Failed to clear tags: ${errorMessage}`
      };
    }
  }
  static async updateNoteTags(app, file, newTags, matchedTags) {
    var _a;
    try {
      const { valid: validNewTags, invalid: invalidNewTags } = this.validateTags(newTags);
      const { valid: validMatchedTags, invalid: invalidMatchedTags } = this.validateTags(matchedTags);
      if (invalidNewTags.length > 0 || invalidMatchedTags.length > 0) {
        const invalidTags = [...invalidNewTags, ...invalidMatchedTags];
        throw new Error(`Invalid tag format found: ${invalidTags.join(", ")}
Tags can only contain letters, numbers, and hyphens`);
      }
      const content = await app.vault.read(file);
      const frontmatter = (_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
      const existingTags = this.getExistingTags(frontmatter);
      const allTags = this.mergeTags(existingTags, [...validNewTags, ...validMatchedTags]).map((tag) => tag.startsWith("#") ? tag.substring(1) : tag);
      let newContent = content;
      const yamlTags = allTags.map((tag) => `  - ${tag}`).join("\n");
      if (content.startsWith("---\n")) {
        const endOfFrontMatter = content.indexOf("---\n", 4);
        if (endOfFrontMatter !== -1) {
          const beforeFrontMatter = content.slice(0, endOfFrontMatter);
          const afterFrontMatter = content.slice(endOfFrontMatter);
          if (beforeFrontMatter.includes("\ntags:")) {
            const tagsRegex = /\ntags:.*?(?=\n[^\s]|\n---)/s;
            newContent = beforeFrontMatter.replace(tagsRegex, `
tags:
${yamlTags}`) + afterFrontMatter;
          } else {
            newContent = beforeFrontMatter + `
tags:
${yamlTags}` + afterFrontMatter;
          }
        }
      } else {
        newContent = `---
tags:
${yamlTags}
---

${content}`;
      }
      await app.vault.modify(file, newContent);
      await app.metadataCache.trigger("changed", file);
      await new Promise((resolve) => setTimeout(resolve, 100));
      app.workspace.trigger("file-open", file);
      return {
        success: true,
        message: `Successfully updated tags: ${validNewTags.length} new tags added, ${validMatchedTags.length} existing tags matched`,
        tags: allTags.map((tag) => `#${tag}`)
      };
    } catch (error) {
      console.error("Error updating note tags:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      new import_obsidian.Notice("Error updating tags");
      return {
        success: false,
        message: `Failed to update tags: ${errorMessage}`
      };
    }
  }
  static getAllTags(app) {
    const tags = new Set();
    app.metadataCache.getCachedFiles().forEach((filePath) => {
      var _a;
      const cache = app.metadataCache.getCache(filePath);
      if ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.tags) {
        const fileTags = this.getExistingTags(cache.frontmatter);
        fileTags.forEach((tag) => tags.add(tag));
      }
    });
    return Array.from(tags).sort();
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  serviceType: "local",
  localEndpoint: "http://localhost:11434",
  localModel: "llama2",
  cloudEndpoint: "https://api.openai.com/v1/chat/completions",
  cloudApiKey: "",
  cloudModel: "gpt-3.5-turbo",
  maxNewTags: 5,
  maxMatchedTags: 2
};
var AITaggerPlugin = class extends import_obsidian2.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.settings = DEFAULT_SETTINGS;
    this.llmService = new LocalLLMService({
      endpoint: DEFAULT_SETTINGS.localEndpoint,
      modelName: DEFAULT_SETTINGS.localModel
    });
  }
  async onload() {
    await this.loadSettings();
    this.initializeLLMService();
    this.addSettingTab(new AITaggerSettingTab(this.app, this));
    this.addCommand({
      id: "analyze-note-and-add-tags",
      name: "Analyze Current Note and Add Tags",
      callback: () => this.analyzeCurrentNote()
    });
    this.addCommand({
      id: "clear-all-tags",
      name: "Clear All Tags (Keep Tags Field)",
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "T" }],
      callback: () => this.clearNoteTags()
    });
    this.loadStyles();
  }
  loadStyles() {
    const css = document.createElement("style");
    css.id = "ai-tagger-styles";
    css.textContent = `
        .connection-test-container {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .connection-test-status {
            margin-left: 10px;
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9em;
        }

        .connection-test-status.success {
            color: var(--color-green);
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .connection-test-status.error {
            color: var(--color-red);
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .connection-test-status.testing {
            color: var(--text-muted);
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .connection-test-status.success::before {
            content: "\u2713";
            font-weight: bold;
        }

        .connection-test-status.error::before {
            content: "\u2717";
            font-weight: bold;
        }

        .connection-test-status.testing::after {
            content: "";
            display: inline-block;
            width: 12px;
            height: 12px;
            border: 2px solid var(--text-muted);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .endpoint-description code {
            background-color: var(--background-modifier-form-control);
            padding: 2px 4px;
            border-radius: 4px;
            font-family: var(--font-monospace);
        }

        .support-container {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 8px;
            background: var(--background-primary-alt);
            text-align: center;
        }

        .support-button {
            margin-top: 1rem;
            background-color: #FF813F !important;
            color: white !important;
        }

        .support-button:hover {
            background-color: #FF9B66 !important;
        }`;
    document.head.appendChild(css);
  }
  initializeLLMService() {
    const config = {
      endpoint: this.settings.serviceType === "local" ? this.settings.localEndpoint : this.settings.cloudEndpoint,
      apiKey: this.settings.cloudApiKey,
      modelName: this.settings.serviceType === "local" ? this.settings.localModel : this.settings.cloudModel
    };
    this.llmService = this.settings.serviceType === "local" ? new LocalLLMService(config) : new CloudLLMService(config);
  }
  async loadSettings() {
    const oldSettings = await this.loadData();
    if (oldSettings && oldSettings.serviceType === "ollama") {
      oldSettings.serviceType = "local";
      oldSettings.localEndpoint = oldSettings.ollamaEndpoint;
      oldSettings.localModel = oldSettings.ollamaModel;
      delete oldSettings.ollamaEndpoint;
      delete oldSettings.ollamaModel;
    }
    this.settings = Object.assign({}, DEFAULT_SETTINGS, oldSettings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.initializeLLMService();
  }
  async testConnection() {
    return this.llmService.testConnection();
  }
  async clearNoteTags() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian2.Notice("Please open a note first");
      return;
    }
    try {
      const result = await TagUtils.clearTags(this.app, activeFile);
      if (result.success) {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if ((view == null ? void 0 : view.getMode()) === "source") {
          view.editor.refresh();
        }
        this.app.vault.trigger("modify", activeFile);
        new import_obsidian2.Notice("Successfully cleared all tags");
      } else {
        new import_obsidian2.Notice(result.message);
      }
      setTimeout(() => {
        this.app.workspace.trigger("file-open", activeFile);
      }, 150);
    } catch (error) {
      console.error("Error clearing tags:", error);
      const message = error instanceof Error ? error.message : "Unknown error";
      new import_obsidian2.Notice(`Error clearing tags: ${message}`);
    }
  }
  async analyzeCurrentNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian2.Notice("Please open a note first");
      return;
    }
    try {
      const content = await this.app.vault.read(activeFile);
      if (!content.trim()) {
        new import_obsidian2.Notice("Note is empty");
        return;
      }
      const existingTags = TagUtils.getAllTags(this.app);
      new import_obsidian2.Notice("Analyzing note content...");
      console.log("Starting tag analysis with:", {
        serviceType: this.settings.serviceType,
        contentLength: content.length,
        existingTagsCount: existingTags.length
      });
      const analysis = await this.llmService.analyzeTags(content, existingTags);
      const result = await TagUtils.updateNoteTags(this.app, activeFile, analysis.suggestedTags.slice(0, this.settings.maxNewTags), analysis.matchedExistingTags.slice(0, this.settings.maxMatchedTags));
      if (result.success) {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if ((view == null ? void 0 : view.getMode()) === "source") {
          view.editor.refresh();
        }
        new import_obsidian2.Notice(result.message);
      } else {
        new import_obsidian2.Notice("Failed to update tags");
      }
    } catch (error) {
      console.error("Error in analyzeCurrentNote:", error);
      const message = error instanceof Error ? error.message : "Unknown error";
      new import_obsidian2.Notice(`Error analyzing note: ${message}`);
    }
  }
  onunload() {
    const style = document.getElementById("ai-tagger-styles");
    if (style) {
      style.remove();
    }
  }
};
var AITaggerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.testButton = null;
    this.statusEl = null;
    this.statusContainer = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("AI Service Type").setDesc("Choose the AI service provider to use").addDropdown((dropdown) => dropdown.addOptions({
      "local": "Local LLM Service",
      "cloud": "Cloud Service"
    }).setValue(this.plugin.settings.serviceType).onChange(async (value) => {
      this.plugin.settings.serviceType = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.serviceType === "local") {
      this.displayLocalSettings(containerEl);
    } else {
      this.displayCloudSettings(containerEl);
    }
    this.displayGeneralSettings(containerEl);
  }
  setTestStatus(status, message) {
    if (!this.statusContainer || !this.statusEl)
      return;
    this.statusContainer.removeClass("testing", "success", "error");
    this.statusContainer.addClass(status);
    switch (status) {
      case "testing":
        this.statusEl.setText("Testing...");
        break;
      case "success":
        this.statusEl.setText(message || "Connection successful");
        break;
      case "error":
        this.statusEl.setText(message || "Connection failed");
        break;
    }
  }
  createTestButton(containerEl) {
    const testContainer = containerEl.createDiv("connection-test-container");
    const testSetting = new import_obsidian2.Setting(testContainer).setName("Connection Test").setDesc("Test connection to AI service");
    const buttonContainer = testSetting.settingEl.createDiv("setting-item-control");
    const button = new import_obsidian2.ButtonComponent(buttonContainer).setButtonText("Test Connection").onClick(async () => {
      var _a;
      button.setButtonText("Testing...").setDisabled(true);
      this.setTestStatus("testing");
      try {
        const result = await this.plugin.testConnection();
        if (result.result === ConnectionTestResult.Success) {
          this.setTestStatus("success", "Connection successful");
        } else {
          this.setTestStatus("error", ((_a = result.error) == null ? void 0 : _a.message) || "Connection failed");
        }
      } catch (error) {
        console.error("Test connection error:", error);
        this.setTestStatus("error", "Error during test");
      } finally {
        button.setButtonText("Test Connection").setDisabled(false);
      }
    });
    this.statusContainer = testContainer.createDiv("connection-test-status");
    this.statusEl = this.statusContainer.createSpan();
    this.testButton = button;
  }
  displayLocalSettings(containerEl) {
    const info = containerEl.createDiv();
    info.createSpan({
      text: "Base URL address of your local LLM service.",
      cls: "setting-item-description"
    });
    info.createEl("br");
    info.createEl("br");
    info.createSpan({
      text: "All services will use the OpenAI-compatible /v1/chat/completions endpoint:",
      cls: "setting-item-description"
    });
    const list = info.createEl("ul", { cls: "setting-item-description" });
    const ollamaItem = list.createEl("li");
    ollamaItem.createSpan({ text: "Ollama - Enter base URL: " });
    ollamaItem.createEl("code", { text: "http://localhost:11434" });
    ollamaItem.createEl("br");
    ollamaItem.createSpan({
      text: "(Will be converted to /v1/chat/completions format)",
      cls: "setting-item-description"
    });
    const lmStudioItem = list.createEl("li");
    lmStudioItem.createSpan({ text: "LM Studio: " });
    lmStudioItem.createEl("code", { text: "http://localhost:1234/v1/chat/completions" });
    const localAIItem = list.createEl("li");
    localAIItem.createSpan({ text: "LocalAI: " });
    localAIItem.createEl("code", { text: "http://localhost:8080/v1/chat/completions" });
    new import_obsidian2.Setting(containerEl).setName("Local LLM Endpoint").setDesc("Enter the base URL for your local service").addText((text) => text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.localEndpoint).onChange(async (value) => {
      this.plugin.settings.localEndpoint = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Model Name").setDesc("Name of the model to use with your local service").addText((text) => text.setPlaceholder("llama2").setValue(this.plugin.settings.localModel).onChange(async (value) => {
      this.plugin.settings.localModel = value;
      await this.plugin.saveSettings();
    }));
    this.createTestButton(containerEl);
  }
  displayCloudSettings(containerEl) {
    const description = createFragment((descEl) => {
      descEl.appendText("Complete chat completions API endpoint URL.");
      descEl.createEl("br");
      descEl.appendText("For example, OpenAI's endpoint:");
      descEl.createEl("br");
      descEl.createEl("code", {
        text: "https://api.openai.com/v1/chat/completions",
        cls: "endpoint-description"
      });
    });
    new import_obsidian2.Setting(containerEl).setName("API Endpoint").setDesc(description).addText((text) => text.setPlaceholder("https://api.openai.com/v1/chat/completions").setValue(this.plugin.settings.cloudEndpoint).onChange(async (value) => {
      this.plugin.settings.cloudEndpoint = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("API Key").setDesc("Cloud service API key").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.cloudApiKey).onChange(async (value) => {
      this.plugin.settings.cloudApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Model Name").setDesc("Name of model to use").addText((text) => text.setPlaceholder("gpt-3.5-turbo").setValue(this.plugin.settings.cloudModel).onChange(async (value) => {
      this.plugin.settings.cloudModel = value;
      await this.plugin.saveSettings();
    }));
    this.createTestButton(containerEl);
  }
  displayGeneralSettings(containerEl) {
    new import_obsidian2.Setting(containerEl).setName("Maximum New Tags").setDesc("Maximum number of new tags to generate (3-10)").addSlider((slider) => slider.setLimits(3, 10, 1).setValue(this.plugin.settings.maxNewTags).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxNewTags = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Maximum Matched Tags").setDesc("Maximum number of tags to match from existing ones (1-3)").addSlider((slider) => slider.setLimits(1, 3, 1).setValue(this.plugin.settings.maxMatchedTags).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxMatchedTags = value;
      await this.plugin.saveSettings();
      containerEl.createEl("h2", { text: "\u652F\u6301\u5F00\u53D1\u8005" });
      const supportEl = containerEl.createDiv("support-container");
      supportEl.createSpan({ text: "\u5982\u679C\u4F60\u89C9\u5F97\u8FD9\u4E2A\u63D2\u4EF6\u5BF9\u4F60\u6709\u5E2E\u52A9\uFF0C\u53EF\u4EE5\u8003\u8651\u7ED9\u6211\u4E70\u676F\u5496\u5561 \u2615\uFE0F" });
      const button = new import_obsidian2.ButtonComponent(supportEl).setButtonText("Buy Me a Coffee").setClass("support-button").onClick(() => {
        window.open("https://buymeacoffee.com/niehu2015o", "_blank");
      });
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
